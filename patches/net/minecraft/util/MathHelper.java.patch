--- ../src-base/minecraft/net/minecraft/util/MathHelper.java
+++ ../src-work/minecraft/net/minecraft/util/MathHelper.java
@@ -6,30 +6,44 @@
 
 public class MathHelper
 {
-    private static float[] SIN_TABLE = new float[65536];
+    private static final int SIN_TABLE_SIZE = 4096;
+    private static final float[] SIN_TABLE = new float[SIN_TABLE_SIZE];
+    private static final float SIN_SCALE = SIN_TABLE_SIZE / (float) (2 * Math.PI);
     private static final int[] multiplyDeBruijnBitPosition;
-    private static final String __OBFID = "CL_00001496";
 
-    public static final float sin(float p_76126_0_)
-    {
-        return SIN_TABLE[(int)(p_76126_0_ * 10430.378F) & 65535];
+    public static float sin(float angle) {
+        int index = (int) (angle * SIN_SCALE) & (SIN_TABLE_SIZE - 1);
+        return SIN_TABLE[index];
     }
 
-    public static final float cos(float p_76134_0_)
-    {
-        return SIN_TABLE[(int)(p_76134_0_ * 10430.378F + 16384.0F) & 65535];
+    public static float cos(float angle) {
+        int index = (int) (angle * SIN_SCALE + SIN_TABLE_SIZE / 4) & (SIN_TABLE_SIZE - 1);
+        return SIN_TABLE[index];
     }
+    static {
+        for (int i = 0; i < SIN_TABLE_SIZE; i++) {
+            SIN_TABLE[i] = (float) Math.sin(i * Math.PI * 2.0D / SIN_TABLE_SIZE);
+        }
+        multiplyDeBruijnBitPosition = new int[] {0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9};
+    }
 
-    public static final float sqrt_float(float p_76129_0_)
-    {
-        return (float)Math.sqrt((double)p_76129_0_);
+    public static float sqrt_float(float value) {
+        return (float) sqrt_approx(value);
     }
 
-    public static final float sqrt_double(double p_76133_0_)
-    {
-        return (float)Math.sqrt(p_76133_0_);
+    public static float sqrt_double(double value) {
+        return (float) sqrt_approx((float) value);
     }
 
+    private static float sqrt_approx(float x) {
+        // Fast inverse square root approximation (精度损失约 1%)
+        float xhalf = 0.5f * x;
+        int i = Float.floatToIntBits(x);
+        i = 0x5f3759df - (i >> 1);
+        x = Float.intBitsToFloat(i);
+        return 1.0f / (x * (1.5f - xhalf * x * x));
+    }
+
     public static int floor_float(float p_76141_0_)
     {
         int i = (int)p_76141_0_;
@@ -316,14 +330,4 @@
             return k == 0 ? p_154354_0_ : p_154354_0_ + p_154354_1_ - k;
         }
     }
-
-    static
-    {
-        for (int var0 = 0; var0 < 65536; ++var0)
-        {
-            SIN_TABLE[var0] = (float)Math.sin((double)var0 * Math.PI * 2.0D / 65536.0D);
-        }
-
-        multiplyDeBruijnBitPosition = new int[] {0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9};
-    }
 }
